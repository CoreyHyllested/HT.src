"""empty message

Revision ID: 57f6ead1372e
Revises: None
Create Date: 2015-06-30 15:34:38.511782

"""

# revision identifiers, used by Alembic.
revision = '57f6ead1372e'
down_revision = None

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

def upgrade():
    ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('image')
    op.drop_table('availability')
    op.drop_table('giftcertificate')
    op.drop_table('umsg')
    op.drop_table('review')
    op.drop_table('referral')
    op.drop_table('migrate_version')
    op.drop_table('meeting')
    op.alter_column('account', 'role',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.drop_column('account', 'referred_by')
    op.create_index(op.f('ix_businessreference_br_uuid'), 'businessreference', ['br_uuid'], unique=True)
    op.create_foreign_key(None, 'businessreference', 'profile', ['br_bus_prof'], ['prof_id'])
    op.create_foreign_key(None, 'businessreference', 'account', ['br_bus_acct'], ['userid'])
    op.drop_column('profile', 'availability')
    ### end Alembic commands ###


def downgrade():
    ### commands auto generated by Alembic - please adjust! ###
    op.add_column('profile', sa.Column('availability', sa.INTEGER(), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'businessreference', type_='foreignkey')
    op.drop_constraint(None, 'businessreference', type_='foreignkey')
    op.drop_index(op.f('ix_businessreference_br_uuid'), table_name='businessreference')
    op.add_column('account', sa.Column('referred_by', sa.VARCHAR(length=40), autoincrement=False, nullable=True))
    op.alter_column('account', 'role',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.create_table('meeting',
    sa.Column('meet_id', sa.VARCHAR(length=40), autoincrement=False, nullable=False),
    sa.Column('meet_sellr', sa.VARCHAR(length=40), autoincrement=False, nullable=False),
    sa.Column('meet_buyer', sa.VARCHAR(length=40), autoincrement=False, nullable=False),
    sa.Column('meet_owner', sa.VARCHAR(length=40), autoincrement=False, nullable=False),
    sa.Column('meet_state', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('meet_flags', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('meet_count', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('meet_cost', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('meet_ts', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('meet_tf', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('meet_tz', sa.VARCHAR(length=32), autoincrement=False, nullable=False),
    sa.Column('meet_details', sa.VARCHAR(length=2048), autoincrement=False, nullable=False),
    sa.Column('meet_location', sa.VARCHAR(length=1024), autoincrement=False, nullable=False),
    sa.Column('meet_created', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('meet_updated', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('meet_secured', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('meet_charged', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('charge_customer_id', sa.VARCHAR(length=40), autoincrement=False, nullable=True),
    sa.Column('charge_credit_card', sa.VARCHAR(length=40), autoincrement=False, nullable=True),
    sa.Column('charge_transaction', sa.VARCHAR(length=40), autoincrement=False, nullable=True),
    sa.Column('charge_user_token', sa.VARCHAR(length=40), autoincrement=False, nullable=True),
    sa.Column('hero_deposit_acct', sa.VARCHAR(length=40), autoincrement=False, nullable=True),
    sa.Column('review_buyer', sa.VARCHAR(length=40), autoincrement=False, nullable=True),
    sa.Column('review_sellr', sa.VARCHAR(length=40), autoincrement=False, nullable=True),
    sa.Column('meet_groupsize', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['meet_buyer'], [u'profile.prof_id'], name=u'meeting_meet_buyer_fkey'),
    sa.ForeignKeyConstraint(['meet_owner'], [u'profile.prof_id'], name=u'meeting_meet_owner_fkey'),
    sa.ForeignKeyConstraint(['meet_sellr'], [u'profile.prof_id'], name=u'meeting_meet_sellr_fkey'),
    sa.ForeignKeyConstraint(['review_buyer'], [u'review.review_id'], name=u'meeting_review_buyer_fkey'),
    sa.ForeignKeyConstraint(['review_sellr'], [u'review.review_id'], name=u'meeting_review_sellr_fkey'),
    sa.PrimaryKeyConstraint('meet_id', name=u'meeting_pkey')
    )
    op.create_table('migrate_version',
    sa.Column('repository_id', sa.VARCHAR(length=250), autoincrement=False, nullable=True),
    sa.Column('repository_path', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('version', sa.INTEGER(), autoincrement=False, nullable=True)
    )
    op.create_table('referral',
    sa.Column('ref_id', sa.VARCHAR(length=40), autoincrement=False, nullable=False),
    sa.Column('ref_account', sa.VARCHAR(length=40), autoincrement=False, nullable=False),
    sa.Column('ref_shareid', sa.VARCHAR(length=40), autoincrement=False, nullable=True),
    sa.Column('ref_gift_id', sa.VARCHAR(length=40), autoincrement=False, nullable=True),
    sa.Column('ref_created', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('ref_id', name=u'referral_pkey')
    )
    op.create_table('review',
    sa.Column('review_id', sa.VARCHAR(length=40), autoincrement=False, nullable=False),
    sa.Column('prof_reviewed', sa.VARCHAR(length=40), autoincrement=False, nullable=False),
    sa.Column('prof_authored', sa.VARCHAR(length=40), autoincrement=False, nullable=False),
    sa.Column('rev_status', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('rev_appt', sa.VARCHAR(length=40), autoincrement=False, nullable=False),
    sa.Column('rev_twin', sa.VARCHAR(length=40), autoincrement=False, nullable=True),
    sa.Column('appt_score', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('appt_value', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('score_attr_time', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('score_attr_comm', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('generalcomments', sa.VARCHAR(length=5000), autoincrement=False, nullable=True),
    sa.Column('rev_updated', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('rev_flags', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['prof_authored'], [u'profile.prof_id'], name=u'review_prof_authored_fkey'),
    sa.ForeignKeyConstraint(['prof_reviewed'], [u'profile.prof_id'], name=u'review_prof_reviewed_fkey'),
    sa.PrimaryKeyConstraint('review_id', name=u'review_pkey')
    )
    op.create_table('umsg',
    sa.Column('msg_id', sa.VARCHAR(length=40), autoincrement=False, nullable=False),
    sa.Column('msg_to', sa.VARCHAR(length=40), autoincrement=False, nullable=False),
    sa.Column('msg_from', sa.VARCHAR(length=40), autoincrement=False, nullable=False),
    sa.Column('msg_thread', sa.VARCHAR(length=40), autoincrement=False, nullable=False),
    sa.Column('msg_parent', sa.VARCHAR(length=40), autoincrement=False, nullable=True),
    sa.Column('msg_content', sa.VARCHAR(length=1024), autoincrement=False, nullable=False),
    sa.Column('msg_created', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('msg_noticed', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('msg_opened', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('msg_subject', sa.VARCHAR(length=64), autoincrement=False, nullable=True),
    sa.Column('msg_flags', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['msg_from'], [u'profile.prof_id'], name=u'umsg_msg_from_fkey'),
    sa.ForeignKeyConstraint(['msg_to'], [u'profile.prof_id'], name=u'umsg_msg_to_fkey'),
    sa.PrimaryKeyConstraint('msg_id', name=u'umsg_pkey')
    )
    op.create_table('giftcertificate',
    sa.Column('gift_id', sa.VARCHAR(length=40), autoincrement=False, nullable=False),
    sa.Column('gift_state', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('gift_value', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('gift_flags', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('gift_purchaser_name', sa.VARCHAR(length=64), autoincrement=False, nullable=True),
    sa.Column('gift_purchaser_mail', sa.VARCHAR(length=64), autoincrement=False, nullable=True),
    sa.Column('gift_stripe_creditcard', sa.VARCHAR(length=40), autoincrement=False, nullable=True),
    sa.Column('gift_stripe_customerid', sa.VARCHAR(length=40), autoincrement=False, nullable=True),
    sa.Column('gift_stripe_transaction', sa.VARCHAR(length=40), autoincrement=False, nullable=True),
    sa.Column('gift_stripe_chargetoken', sa.VARCHAR(length=40), autoincrement=False, nullable=True),
    sa.Column('gift_purchaser_prof', sa.VARCHAR(length=40), autoincrement=False, nullable=True),
    sa.Column('gift_recipient_name', sa.VARCHAR(length=64), autoincrement=False, nullable=False),
    sa.Column('gift_recipient_note', sa.VARCHAR(length=256), autoincrement=False, nullable=True),
    sa.Column('gift_recipient_prof', sa.VARCHAR(length=40), autoincrement=False, nullable=True),
    sa.Column('gift_recipient_proj', sa.VARCHAR(length=40), autoincrement=False, nullable=True),
    sa.Column('gift_dt_created', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('gift_dt_updated', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('gift_recipient_addr', sa.VARCHAR(length=128), autoincrement=False, nullable=True),
    sa.Column('gift_recipient_cell', sa.VARCHAR(length=16), autoincrement=False, nullable=True),
    sa.Column('gift_recipient_mail', sa.VARCHAR(length=64), autoincrement=False, nullable=False),
    sa.Column('gift_dt_charged', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('gift_purchaser_cost', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('gift_id', name=u'giftcertificate_pkey')
    )
    op.create_table('availability',
    sa.Column('avail_id', sa.INTEGER(), nullable=False),
    sa.Column('avail_profile', sa.VARCHAR(length=40), autoincrement=False, nullable=False),
    sa.Column('avail_created', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('avail_updated', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('avail_weekday', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('avail_repeats', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('avail_timeout', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('avail_start', postgresql.TIME(), autoincrement=False, nullable=True),
    sa.Column('avail_finish', postgresql.TIME(), autoincrement=False, nullable=True),
    sa.Column('avail_project', sa.VARCHAR(length=40), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['avail_profile'], [u'profile.prof_id'], name=u'availability_avail_profile_fkey'),
    sa.ForeignKeyConstraint(['avail_project'], [u'project.proj_id'], name=u'availability_avail_project_fkey'),
    sa.PrimaryKeyConstraint('avail_id', name=u'availability_pkey')
    )
    op.create_table('image',
    sa.Column('img_id', sa.VARCHAR(length=64), autoincrement=False, nullable=False),
    sa.Column('img_profile', sa.VARCHAR(length=40), autoincrement=False, nullable=False),
    sa.Column('img_comment', sa.VARCHAR(length=256), autoincrement=False, nullable=True),
    sa.Column('img_created', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('img_flags', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('img_order', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('img_lesson', sa.VARCHAR(length=256), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['img_profile'], [u'profile.prof_id'], name=u'image_img_profile_fkey'),
    sa.PrimaryKeyConstraint('img_id', name=u'image_pkey')
    )
    ### end Alembic commands ###
